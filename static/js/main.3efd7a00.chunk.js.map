{"version":3,"sources":["i18n/index.ts","reducers/changeLanguage.ts","reducers/selectedMonth.ts","reducers/eventMode.ts","reducers/currentTasks.ts","invariants.ts","reducers/taskList.ts","reducers/week.ts","reducers/index.ts","actions/actions.ts","pages/Month.tsx","pages/Calendar.tsx","pages/Time.tsx","pages/WeeklyCalendar.tsx","components/ui/Select/Select.tsx","pages/Details.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultLanguage","localStorage","getItem","setLanguage","resources","en","translation","translationEN","ua","translationUA","i18n","use","initReactI18next","init","lng","fallbackLng","changeLanguage","state","type","payload","initialState","selectedMonth","Date","getMonth","selectedDate","action","month","eventMode","fetchCurrentTasksReducer","Languages","periods","MONTHS_CON","DAYS","TIME_ZONE","initialList","start","message","id","taskListReducer","setItem","JSON","stringify","startOfWeek","end","endOfWeek","setWeekReducer","rootReducer","combineReducers","lang","period","week","currentTasks","taskList","changeSelectedDate","date","fetchCurrentTasks","fetchAllTasks","setWeek","Months","t","useTranslation","dispatch","useDispatch","useSelector","className","map","item","cls","classnames","active","key","onClick","changeSelectedMonth","changeMonth","Calendar","props","handleSetAction","selectedDates","prompt","newTask","getTime","temporary","push","format","add","days","handleSetDates","d","setState","year","dates","dataFromStorage","parsedData","parse","this","dateObj","ind","inMonth","highlight","isSameDay","filter","parseISO","length","day","updatedDAys","renderDay","renderDate","weeks","differenceInWeeks","renderDays","renderGrid","nextProps","prevState","makeMonthDates","React","Component","defaultProps","preDates","nextDates","preMonth","subMonths","preMonthLastDate","lastDayOfMonth","preMonthDayOffset","getDay","getFullYear","getDate","totalDaysInCurrentMonth","getDaysInMonth","currentMonthLastDate","nextMonth","addMonths","nextMonthFirstDate","setDate","nextMonthDayOffset","i","ConnectedCalendar","connect","tasks","CalendarTranslated","withTranslation","style","width","height","index","useState","highlitedDate","setHighlitedDate","selectedTimes","setSelectedTimes","renderHours","time","handleSetTimes","renderTaskForDay","diferent","differenceInHours","hoursStart","getHours","top","updatedTasks","handleRemoveTask","dayName","tasksForDay","task","hours","eachHourOfInterval","addHours","useEffect","result","eachDayOfInterval","updatedDays","useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","NativeSelects","classes","data","handleChange","value","FormControl","InputLabel","htmlFor","NativeSelect","onChange","inputProps","name","ConnectedDetail","selectedPeriod","language","setPeriod","remaind","differenceInDays","lastDayOfYear","handleSetWeek","amount","newWeekStartFrom","addWeeks","today","startOfToday","event","target","e","checked","overflowY","updatedCurrentTasks","handleRemoveTasks","App","Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","dynamicCompose","compose","store","createStore","applyMiddleware","render","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3efd7a00.chunk.js","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport translationEN from \"./locales/en.json\";\nimport translationUA from \"./locales/ua.json\";\n\nconst setLanguage = () => {\n  const language = localStorage.getItem(\"language\");\n  switch (language) {\n    case \"en\":\n      return \"en\";\n    case \"ua\":\n      return \"ua\";\n    default:\n      return \"en\";\n  }\n};\n\nexport const defaultLanguage: string = setLanguage();\n\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  ua: {\n    translation: translationUA,\n  },\n};\n\ni18n.use(initReactI18next).init({\n  lng: defaultLanguage,\n  fallbackLng: defaultLanguage,\n  resources,\n});\n\nexport default i18n;\n","function changeLanguage(\n  state = \"en\",\n  { type, payload }: any\n): string | boolean {\n  if (type === \"CHANGE_LANGUAGE\") {\n    return payload;\n  }\n  return state;\n}\n\nexport default changeLanguage;\n","const initialState = {\n  selectedMonth: new Date().getMonth(),\n  selectedDate: new Date(),\n  type: 'month'\n};\n\nconst selectedDate = (state = initialState, action: any) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case \"CHANGE_MONTH\":\n      return {\n        ...state,\n        selectedMonth: payload.selectedMonth,\n      };\n    case \"CHANGE_DATE\":\n      const month = new Date(payload.selectedDate).getMonth();\n\n      return {\n        ...state,\n        selectedMonth: month,\n        selectedDate: payload.selectedDate,\n      };\n      case \"CHANGE_TYPE\":\n        return {\n          ...state,\n          type: payload.type,\n        };\n    default:\n      return state;\n  }\n};\n\nexport default selectedDate;\n","function eventMode(\n  state = false,\n  { type, payload }: any\n): string | boolean {\n  if (type === \"CHANGE_EVENT_STATUS\") {\n    return payload;\n  }\n  return state;\n}\n\nexport default eventMode;\n","import {Task} from 'typedefs'\n\nfunction fetchCurrentTasksReducer(\n  state = [],\n  { type, payload }: any\n): Task[] {\n  if (type === \"FETCH_USER_TASKS\") {\n    return payload;\n  }\n  return state;\n}\n\nexport default fetchCurrentTasksReducer;\n","export const Languages = [\n  'en',\n  'ua'\n]\n\nexport const periods = ['month', 'week']\n\nexport const MONTHS_CON = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nexport const DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nexport const TIME_ZONE = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\",\n  \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\",\n  \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\",\n  \"21:00\", \"22:00\", \"23:00\"\n];\n\nexport const initialList = [\n  { start: \"2020-10-21T03:00:00.000+03:00\", message: \"Go to supermarket\", id: \"unknown\" },\n  { start: \"2020-10-25T03:00:00.000+03:00\", message: \"Watch a serial\", id: \"unknown\" },\n  { start: \"2020-10-31T03:00:00.000+03:00\", message: \"relaxing day\", id: \"unknown\" }\n]","\nimport { initialList } from 'invariants'\nimport {Task} from 'typedefs'\n\nfunction taskListReducer(\n  state = initialList,\n  { type, payload }: any\n): Task[] {\n  if (type === \"FETCH_TASKS\") {\n    localStorage.setItem('data', JSON.stringify([...payload] as Task[]))\n    return payload;\n  }\n  return state;\n}\n\nexport default taskListReducer;\n","import {\n  endOfWeek,\n  startOfWeek,\n} from 'date-fns'\n\ntype ActionProps = {\n  type: string\n  payload: {\n    start: Date\n    end: Date\n  }\n}\n\nconst initialState = {\n  start: startOfWeek(new Date()),\n  end: endOfWeek(new Date())\n}\n\nfunction setWeekReducer(\n  state = initialState,\n  action: ActionProps\n) {\n  const { type, payload } = action\n  if (type === \"SET_WEEK\") {\n    return payload;\n  }\n  return state;\n}\n\nexport default setWeekReducer;\n","import { combineReducers } from \"redux\";\n\nimport lang from \"./changeLanguage\";\nimport selectedMonth from \"./selectedMonth\";\nimport eventMode from './eventMode'\nimport currentTasks from './currentTasks'\nimport taskList from './taskList'\nimport setWeekReducer from './week'\n\nexport const rootReducer = combineReducers({\n  lang,\n  period: selectedMonth,\n  week: setWeekReducer,\n  eventMode,\n  currentTasks,\n  taskList\n});\n","import  { Task, Week } from '../typedefs'\n\nexport const changeSelectedMonth = (month: number) => ({\n  type: \"CHANGE_MONTH\",\n  payload: {\n    selectedMonth: month,\n  },\n});\n\nexport const changeSelectedDate = (date: string) => ({\n  type: \"CHANGE_DATE\",\n  payload: {\n    selectedDate: date,\n  },\n});\n\nexport const changeLanguage: any = (payload: string) => ({\n  type: \"CHANGE_LANGUAGE\",\n  payload,\n});\n\nexport const changeEventStatus: any = (payload: boolean) => ({\n  type: \"CHANGE_EVENT_STATUS\",\n  payload,\n});\n\nexport const fetchCurrentTasks: any = (payload: Task[]) => ({\n  type: \"FETCH_USER_TASKS\",\n  payload,\n});\n\nexport const fetchAllTasks: any = (payload: Task[]) => ({\n  type: \"FETCH_TASKS\",\n  payload,\n});\n\nexport const changePeriodType: any = (payload: string) => ({\n  type: \"CHANGE_TYPE\",\n  payload,\n});\n\nexport const setWeek: any = (payload: Week) => ({\n  type: \"SET_WEEK\",\n  payload,\n});","import React from 'react'\nimport classnames from 'clsx'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { changeSelectedMonth } from 'actions'\nimport { State } from 'typedefs'\nimport { MONTHS_CON } from 'invariants'\n\n\nfunction Months() {\n  const { t } = useTranslation()\n  const dispatch = useDispatch();\n  const selectedMonth = useSelector((state: State) => state.period.selectedMonth)\n  const changeMonth = (month: number) => {\n    dispatch(changeSelectedMonth(month))\n  }\n\n  const renderItem = (item: string, month: number) => {\n    const cls = classnames(\"month\", {\n      active: month === selectedMonth\n    });\n\n    return (\n      <div\n        className={cls}\n        key={month}\n        onClick={() => changeMonth(month)}\n      >\n        {t(`month.${item}`)}\n      </div>\n    );\n  };\n\n  return (\n    <section className=\"months\">\n      {MONTHS_CON.map(renderItem)}\n      <span className=\"indicator\" />\n    </section>\n  );\n}\n\nexport default Months","import React from 'react'\nimport classnames from 'clsx'\n// import * as R from 'ramda'\nimport { withTranslation } from \"react-i18next\";\n\nimport { connect } from \"react-redux\";\nimport {\n  add,\n  getDaysInMonth,\n  getDay,\n  lastDayOfMonth,\n  addMonths,\n  subMonths,\n  differenceInWeeks,\n  format,\n  isSameDay,\n  parseISO,\n  getTime,\n} from 'date-fns';\n\nimport {\n  changeSelectedDate,\n  fetchCurrentTasks,\n  fetchAllTasks\n} from 'actions'\n\nimport { initialList, DAYS } from 'invariants'\nimport { Task, State } from 'typedefs'\n\n\n\ntype CalendarProps = {\n  changeSelectedDate: any,\n  fetchCurrentTasks: any,\n  fetchAllTasks: any\n  eventMode: boolean,\n  taskList: Task[],\n  t?: Function\n}\n\ntype CalendarState = {\n  year: any,\n  month: any,\n  selectedDate: any,\n  dates: any[],\n  selectedDates: any\n}\n\nclass Calendar extends React.Component<CalendarProps, CalendarState> {\n  static defaultProps = {\n    changeSelectedDate: () => null\n  };\n  constructor(props: CalendarProps) {\n    super(props);\n    this.state = {\n      year: null,\n      month: null,\n      selectedDate: null,\n      dates: [],\n      selectedDates: {\n        start: null,\n        end: null\n      },\n    };\n  }\n\n  componentDidMount() {\n    const dataFromStorage: string | null = localStorage.getItem('data')\n    const parsedData = JSON.parse(dataFromStorage as string)\n\n    this.props.fetchAllTasks(parsedData ?? initialList)\n  }\n\n  static makeMonthDates = (props: any) => {\n    const { year, month } = props;\n    const preDates = [];\n    const dates = [];\n    const nextDates = [];\n\n    const preMonth = subMonths(new Date(year, month), 1);\n    const preMonthLastDate = lastDayOfMonth(preMonth);\n    let preMonthDayOffset = getDay(preMonthLastDate);\n\n    while (preMonthDayOffset >= 0 && preMonthDayOffset < 6) {\n      preDates.push({\n        inMonth: false,\n        date: new Date(\n          `${preMonthLastDate.getFullYear()}-${preMonthLastDate.getMonth() + 1\n          }-${preMonthLastDate.getDate() - preMonthDayOffset}`\n        )\n      });\n      preMonthDayOffset--;\n    }\n\n    const totalDaysInCurrentMonth = getDaysInMonth(new Date(year, month));\n    const currentMonthLastDate = new Date(\n      `${year}-${month + 1}-${totalDaysInCurrentMonth}`\n    );\n\n    for (let day = 1; day < totalDaysInCurrentMonth + 1; day++) {\n      dates.push({\n        inMonth: true,\n        date: new Date(`${year}-${month + 1}-${day}`)\n      });\n    }\n\n    const nextMonth = addMonths(new Date(year, month), 1);\n    const nextMonthFirstDate = new Date(nextMonth.setDate(1));\n    let nextMonthDayOffset = 6 - getDay(currentMonthLastDate);\n    for (let i = 0; i < nextMonthDayOffset; i++) {\n      nextDates.push({\n        inMonth: false,\n        date: new Date(\n          `${nextMonthFirstDate.getFullYear()}-${nextMonthFirstDate.getMonth() + 1\n          }-${nextMonthFirstDate.getDate() + i}`\n        )\n      });\n    }\n\n    return [...preDates, ...dates, ...nextDates];\n  };\n\n  static getDerivedStateFromProps(nextProps: any, prevState: any) {\n    if (\n      nextProps.year !== prevState.year ||\n      nextProps.month !== prevState.month ||\n      nextProps.selectedDate !== prevState.selectedDate\n    ) {\n      return {\n        year: nextProps.year,\n        month: nextProps.month,\n        selectedDate: nextProps.selectedDate,\n        dates: Calendar.makeMonthDates(nextProps)\n      };\n    }\n    return null;\n  }\n\n  handleSetAction = () => {\n    const { selectedDates } = this.state\n    let { start, end } = selectedDates\n\n    if (start && end) {\n      const { taskList, fetchAllTasks } = this.props\n      const message = prompt('task', '')\n      const newTask: Task[] = []\n      const id = getTime(new Date())\n\n      if (!message) {\n        return\n      }\n\n      if (start > end) {\n        let temporary = start\n        start = end\n        end = temporary\n        temporary = null\n      }\n\n      while (start <= end) {\n        newTask.push({\n          start: format(start, `yyyy-MM-dd'T'HH:mm:ss.SSSxxx`),\n          message,\n          id\n        })\n        start = add(start, { days: 1 })\n      }\n\n      fetchAllTasks([...taskList, ...newTask])\n    }\n  }\n\n  handleSetDates = (d: Date) => {\n    const { selectedDates } = this.state\n\n    this.setState({\n      selectedDates: {\n        start: selectedDates.start ?? d,\n        end: selectedDates.start ? d : selectedDates.end\n      }\n    }, this.handleSetAction)\n\n    if (selectedDates.end) {\n      this.setState({\n        selectedDates: {\n          start: d,\n          end: null\n        }\n      })\n    }\n  }\n\n  renderDate(dateObj: any, ind: number) {\n    const { t }: any = this.props\n    const { changeSelectedDate, eventMode, fetchCurrentTasks, taskList } = this.props;\n    const { selectedDate } = this.state;\n    const { date, inMonth } = dateObj;\n    const cls = classnames(\"calendar-date\", {\n      \"in-month\": inMonth,\n      highlight: inMonth && isSameDay(date, new Date(selectedDate))\n    });\n\n    const currentTasks = taskList.filter((item: Task) => isSameDay(date, parseISO(item.start)))\n\n    return (\n      <div\n        className={cls}\n        key={ind}\n        onClick={() => {\n          if (eventMode) {\n            this.handleSetDates(date)\n          } else {\n            fetchCurrentTasks(currentTasks)\n          }\n          changeSelectedDate(date)\n        }}\n      >\n        {format(date, \"dd\")} <br />\n        {currentTasks.length ? `${currentTasks.length} ${t(\"taskHere\")}` : null}\n      </div>\n    );\n  }\n\n  renderDay(day: string) {\n    return (\n      <div className=\"calendar-day\" key={day}>\n        {day}\n      </div>\n    );\n  }\n  renderDays() {\n    const { t }: any = this.props\n    const updatedDAys = DAYS.map(d => `${t(`days.${d}`)}`)\n    return (\n      <header className=\"calendar-days\">\n        {updatedDAys.map((day) => this.renderDay(day))}\n      </header>\n    );\n  }\n\n  renderGrid() {\n    return (\n      <section className=\"calendar-grid\">\n        {this.state.dates.map((date, ind) => this.renderDate(date, ind))}\n      </section>\n    );\n  }\n\n  render() {\n    const { dates } = this.state;\n    const weeks = differenceInWeeks(\n      dates[dates.length - 1].date,\n      dates[0].date\n    );\n\n    const cls = classnames(\"calendar\", `calendar-${weeks}-weeks`);\n\n    return (\n      <article className={cls}>\n        {this.renderDays()}\n        {this.renderGrid()}\n      </article>\n    );\n  }\n}\n\nconst ConnectedCalendar = connect(\n  (state: State) => {\n    return {\n      year: new Date().getFullYear(),\n      month: state.period.selectedMonth,\n      selectedDate: state.period.selectedDate,\n      eventMode: state.eventMode,\n      taskList: state.taskList,\n    };\n  },\n  (dispatch) => ({\n    changeSelectedDate: (date: any) => {\n      dispatch(changeSelectedDate(date));\n    },\n    fetchCurrentTasks: (tasks: Task[]) => {\n      dispatch(fetchCurrentTasks(tasks))\n    },\n    fetchAllTasks: (tasks: Task[]) => {\n      dispatch(fetchAllTasks(tasks))\n    },\n\n  })\n)(Calendar);\n\nconst CalendarTranslated = withTranslation()(ConnectedCalendar);\n\nexport default CalendarTranslated","import React from 'react'\n\nimport { TIME_ZONE } from 'invariants'\n\nfunction Months() {\n  const renderItem = (item: string, index: number) => {\n    return (\n      <div className='time-zone'\n        key={index}\n      >\n        {item}\n      </div>\n    );\n  };\n\n  return (\n    <section className=\"times\">\n      <div style={{ width: '100%', height: '48px' }}></div>\n      {TIME_ZONE.map(renderItem)}\n    </section>\n  );\n}\n\n\n\nexport default Months","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport classnames from 'clsx'\nimport { withTranslation } from \"react-i18next\";\nimport {\n  getHours,\n  format,\n  isSameDay,\n  parseISO,\n  eachDayOfInterval,\n  eachHourOfInterval,\n  addHours,\n  getTime,\n  differenceInHours\n} from 'date-fns';\n\nimport { DAYS } from 'invariants'\nimport { Task, Week, State } from 'typedefs'\nimport {\n  changeSelectedDate,\n  fetchCurrentTasks,\n  fetchAllTasks\n} from 'actions'\n\ntype CalendarProps = {\n  changeSelectedDate: any,\n  fetchCurrentTasks: any,\n  fetchAllTasks: any\n  eventMode: boolean,\n  taskList: any[],\n  week: Week,\n  t?: Function\n}\n\nconst WeeklyCalendar: React.FC<CalendarProps> = (props) => {\n  const dispatch = useDispatch()\n  const { eventMode, taskList, week } = useSelector((state: State) => ({\n    eventMode: state.eventMode,\n    taskList: state.taskList,\n    week: state.week,\n  }))\n\n  const [highlitedDate, setHighlitedDate] = useState<Date>(new Date())\n  const [selectedTimes, setSelectedTimes] = useState<any>({\n    start: null,\n    end: null\n  })\n\n  const handleSetAction = () => {\n    let { start, end } = selectedTimes\n\n    if (start && end) {\n      const message = prompt('task', '')\n      const newTask: Task[] = []\n      const id = getTime(new Date())\n\n      if (!message) {\n        return\n      }\n\n      if (start > end) {\n        let temporary = start\n        start = end\n        end = temporary\n        temporary = null\n      }\n\n      newTask.push({\n        start: format(start, `yyyy-MM-dd'T'HH:mm:ss.SSSxxx`),\n        end: format(end, `yyyy-MM-dd'T'HH:mm:ss.SSSxxx`),\n        message,\n        id\n      })\n\n      dispatch(fetchAllTasks([...taskList, ...newTask]))\n    }\n  }\n\n  const handleSetTimes = (time: Date) => {\n    setSelectedTimes({\n      start: selectedTimes.start ?? time,\n      end: selectedTimes.start ? time : selectedTimes.end\n    })\n\n    if (selectedTimes.end) {\n      setSelectedTimes({\n        start: time,\n        end: null\n      })\n    }\n  }\n\n  const renderHours = (time: Date, index: number) => {\n    return (\n      <div className='daily-time' key={index} onClick={() => {\n        if (eventMode) {\n          handleSetTimes(time)\n        }\n      }}\n      />\n    );\n  }\n\n  const handleRemoveTask = (id: number | string) => {\n    const updatedTasks = taskList.filter(i => i.id !== id)\n\n    dispatch(fetchAllTasks([...updatedTasks]))\n  }\n\n  const renderTaskForDay = (d: any) => {\n    const diferent = differenceInHours(parseISO(d.end), parseISO(d.start))\n    const hoursStart = getHours(parseISO(d.start))\n\n    return (\n      <div className='daily-task' style={{ height: `${25 * diferent}px`, top: `${25 * hoursStart}px` }}>\n        {d.message}\n        <div className='remove-daily-task' onClick={() => handleRemoveTask(d.id)}>\n          X\n        </div>\n      </div>\n    )\n  }\n\n  const renderGrid = (date: Date) => {\n    const tasksForDay = taskList.filter((task: any) => isSameDay(date, parseISO(task.start)) && isSameDay(date, parseISO(task.end)))\n\n    const hours = eachHourOfInterval({\n      start: date,\n      end: addHours(date, 23)\n    })\n\n    return (\n      <section className=\"calendar-week-grid\">\n        {hours.map((time: any, index: number) => renderHours(time, index))}\n        {tasksForDay.map((task: Task) => renderTaskForDay(task))}\n      </section>\n    );\n  }\n\n  const renderDay = ({ dayName, date }: any, index: number) => {\n    const cls = classnames(\"calendar-day\", {\n      \"highlight\": isSameDay(date, highlitedDate)\n    });\n\n    const currentTasks = taskList.filter((item: Task) => isSameDay(date, parseISO(item.start)))\n\n    return (\n      <div className='weekly-day-wrapper'>\n        <div className={cls} key={`${index} ${dayName}`} onClick={() => {\n          dispatch(changeSelectedDate(date))\n          dispatch(fetchCurrentTasks(currentTasks))\n          setHighlitedDate(date)\n        }} >\n          {dayName}\n        </div>\n        {renderGrid(date)}\n      </div>\n    );\n  }\n\n  const renderDays = () => {\n    const t: any = props.t\n    const result = eachDayOfInterval(week as any)\n    const updatedDays = DAYS.map((day, i) => {\n      const date = format(result[i], 'dd/MM')\n\n      return {\n        dayName: `${t(`days.${day}`)} (${date})`,\n        date: result[i]\n      }\n    })\n\n\n    return (\n      <header className=\"calendar-days\">\n        {updatedDays.map((day, index) => renderDay(day, index))}\n      </header>\n    );\n  }\n\n  useEffect(handleSetAction, [selectedTimes])\n\n\n  return (\n    <article className='calendar'>\n      {renderDays()}\n    </article>\n  )\n}\n\n\nconst CalendarTranslated = withTranslation()(WeeklyCalendar as any);\n\nexport default CalendarTranslated","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect, { NativeSelectProps } from '@material-ui/core/NativeSelect';\nimport { useTranslation } from \"react-i18next\";\n\n\nexport interface NativeSelectsProps extends NativeSelectProps {\n  data: string[]\n  handleChange: any\n  value: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\nexport default function NativeSelects(props: NativeSelectsProps) {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const { data, handleChange, value } = props;\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"custom-dropdown\">{t(\"period\")}</InputLabel>\n        <NativeSelect\n          value={value}\n          onChange={handleChange}\n          inputProps={{\n            name: 'name',\n            id: 'custom-dropdown',\n          }}\n        >\n          {\n            data.map((i: string) => (\n              <option key={i} value={i}>{t(`select.${i}`)}</option>\n            ))\n          }\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n}\n","import React, { useState } from 'react'\nimport i18n from \"i18next\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from 'react-redux'\nimport { useTranslation } from \"react-i18next\";\nimport {\n  addWeeks,\n  format,\n  differenceInDays,\n  lastDayOfYear,\n  startOfWeek,\n  endOfWeek,\n  startOfToday,\n} from 'date-fns';\n\nimport {\n  changeLanguage,\n  changeEventStatus,\n  changePeriodType,\n  fetchAllTasks,\n  setWeek,\n  fetchCurrentTasks,\n} from 'actions'\nimport Select from 'components/ui/Select'\nimport { Languages, periods } from 'invariants'\nimport { Task, State } from 'typedefs'\n\ntype DetailProps = {\n  selectedDate: any,\n  tasks: Task[],\n  taskList: Task[],\n  week: any,\n  selectedPeriod: string\n  language: string\n}\n\nfunction Detail(props: DetailProps) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch()\n  const { selectedDate, tasks, selectedPeriod, language } = props;\n  const [period, setPeriod] = useState<string>(selectedPeriod);\n\n  const handleChange = (event: React.ChangeEvent<any>) => {\n    setPeriod(event.target.value);\n    dispatch(changePeriodType({ type: event.target.value }))\n\n  };\n  const remaind = differenceInDays(lastDayOfYear(selectedDate), selectedDate);\n  const year = new Date(selectedDate).getFullYear();\n\n  const handleChangeLanguage = (lang: string) => {\n    localStorage.setItem(\"language\", lang)\n    dispatch(changeLanguage(lang))\n    i18n.changeLanguage(lang)\n  }\n\n  const handleEventStatus = (e: React.ChangeEvent<any>) => {\n    dispatch(changeEventStatus(e.target.checked))\n  }\n\n  const handleRemoveTasks = (id: number | string) => {\n    const { taskList, tasks } = props;\n    const updatedTasks = taskList.filter(i => i.id !== id)\n    const updatedCurrentTasks = tasks.filter(i => i.id !== id)\n\n    dispatch(fetchAllTasks([...updatedTasks]))\n    dispatch(fetchCurrentTasks([...updatedCurrentTasks]))\n  }\n\n  const handleSetWeek = (amount: number) => {\n    const { week } = props;\n    const newWeekStartFrom = addWeeks(week.start, amount)\n\n    dispatch(setWeek({ start: newWeekStartFrom, end: endOfWeek(newWeekStartFrom) }))\n  }\n\n  const handleSetWeekFromToday = () => {\n    const today = startOfToday()\n\n    dispatch(setWeek({ start: startOfWeek(today), end: endOfWeek(today) }))\n  }\n\n  return (\n    <section className=\"detail\">\n      <div className='language-wrapper'>\n        {Languages.map(i => (\n          <div\n            className={language === i ? \"language active-language\" : 'language'}\n            key={i}\n            onClick={() => handleChangeLanguage(i)}>{i}</div>\n        ))}\n      </div>\n\n      {\n        selectedPeriod === 'week' && (\n          <div className='weekly-btn-wrapper'>\n            <div className='week-changer today' onClick={handleSetWeekFromToday}>{t(\"today\")}</div>\n            <div className='week-changer arrows' onClick={() => handleSetWeek(-1)}>{'<'}</div>\n            <div className='week-changer arrows' onClick={() => handleSetWeek(1)}>{\">\"}</div>\n          </div>\n        )\n      }\n\n      <Select data={periods} value={period} handleChange={handleChange} />\n\n      <input type=\"checkbox\" onChange={handleEventStatus} />\n      <label>{t(\"eMode\")}</label>\n      <div>\n        <h3 className=\"date-string\">\n          {format(selectedDate, \"MMM，Do\")}\n        </h3>\n        <p className=\"remaind\">\n          {remaind} {t(\"daysToNR\")} {year}\n        </p>\n      </div>\n      <br />\n\n      <section>\n        <h3> {t(\"selectedTaskTitle\")}</h3>\n        <div style={{ overflowY: 'auto', height: '200px' }}>\n          {\n            tasks.map((i: Task, index: number) => (\n              <div key={i.id} className='task-detail-block'>\n                <span>\n                  {index + 1} {\". \"} {i.message}\n                </span>\n                <span className='remove-task' onClick={() => handleRemoveTasks(i.id)}>X</span>\n              </div>\n            ))\n          }\n        </div>\n      </section>\n    </section >\n  );\n}\n\nconst ConnectedDetail = connect((state: State) => ({\n  selectedDate: state.period.selectedDate,\n  tasks: state.currentTasks,\n  taskList: state.taskList,\n  selectedPeriod: state.period.type,\n  week: state.week,\n  language: state.lang,\n}))(Detail);\n\nexport default ConnectedDetail","import React from 'react';\nimport { useSelector } from 'react-redux'\n\nimport ConnectedMonths from './pages/Month'\nimport ConnectedCalendar from './pages/Calendar'\nimport ConnectedTime from './pages/Time'\nimport ConnectedWeeklyCalendar from './pages/WeeklyCalendar'\nimport ConnectedDetail from './pages/Details'\n\nimport { State } from './typedefs'\n\nimport './App.scss';\n\nfunction App() {\n  const period = useSelector((state: State) => state.period.type)\n\n  return (\n    <div className=\"application\">\n      <article className=\"board\">\n        {\n          period === 'month'\n            ? (\n              <>\n                <ConnectedMonths />\n                <ConnectedCalendar />\n              </>\n            )\n            : (\n              <>\n                <ConnectedTime />\n                <ConnectedWeeklyCalendar />\n              </>\n            )\n        }\n        <ConnectedDetail />\n      </article>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport createSagaMiddleware from \"redux-saga\";\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware, Store, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from \"react-redux\";\nimport { I18nextProvider } from \"react-i18next\"\n\nimport i18n from \"i18n\"\nimport { rootReducer } from \"reducers\";\nimport App from './App'\nimport { State } from 'typedefs'\nimport * as serviceWorker from './serviceWorker';\n\nimport './App.scss'\nimport './index.css';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst dynamicCompose: any =\n  process.env.NODE_ENV === \"development\" ? composeWithDevTools : compose;\n\nconst store: Store<State> = createStore(\n  rootReducer,\n  dynamicCompose(applyMiddleware(sagaMiddleware))\n);\n\nrender(\n  <I18nextProvider i18n={i18n}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </I18nextProvider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}