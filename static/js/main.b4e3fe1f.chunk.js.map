{"version":3,"sources":["i18n/index.ts","actions/actions.ts","actions/actionNames.ts","reducers/changeLanguage.ts","reducers/selectedMonth.ts","reducers/eventMode.ts","reducers/currentTasks.ts","invariants.ts","reducers/taskList.ts","reducers/week.ts","reducers/index.ts","pages/Month.tsx","pages/Calendar.tsx","pages/Time.tsx","pages/WeeklyCalendar.tsx","components/ui/Select/Select.tsx","components/ui/Checkbox/Checkbox.tsx","pages/Details.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultLanguage","localStorage","getItem","setLanguage","resources","en","translation","translationEN","ua","translationUA","i18n","use","initReactI18next","init","lng","fallbackLng","changeSelectedDate","date","type","CHANGE_DATE","payload","selectedDate","fetchCurrentTasks","FETCH_USER_TASKS","fetchAllTasks","FETCH_TASKS","setWeek","SET_WEEK","CHANGE_LANGUAGE","CHANGE_EVENT_STATUS","CHANGE_MONTH","CHANGE_TYPE","initialState","changeLanguage","state","action","selectedMonth","Date","getMonth","month","eventMode","fetchCurrentTasksReducer","Languages","periods","MONTHS_CON","DAYS","TIME_ZONE","initialList","start","message","id","taskListReducer","setItem","JSON","stringify","startOfWeek","end","endOfWeek","setWeekReducer","rootReducer","combineReducers","lang","period","week","currentTasks","taskList","Months","t","useTranslation","dispatch","useDispatch","useSelector","changeMonth","changeSelectedMonth","className","map","item","cls","clsx","active","key","onClick","Calendar","props","handleSetAction","selectedDates","prompt","newTask","getTime","temporary","push","format","add","days","handleSetDates","d","setState","year","dates","dataFromStorage","parsedData","parse","this","dateObj","ind","inMonth","highlight","isSameDay","filter","parseISO","length","day","updatedDAys","renderDay","renderDate","weeks","differenceInWeeks","renderDays","renderGrid","nextProps","prevState","makeMonthDates","React","Component","defaultProps","preDates","nextDates","preMonth","subMonths","preMonthLastDate","lastDayOfMonth","preMonthDayOffset","getDay","getFullYear","getDate","totalDaysInCurrentMonth","getDaysInMonth","currentMonthLastDate","nextMonth","addMonths","nextMonthFirstDate","setDate","nextMonthDayOffset","i","ConnectedCalendar","connect","tasks","CalendarTranslated","withTranslation","style","width","height","index","useState","highlitedDate","setHighlitedDate","selectedTimes","setSelectedTimes","renderHours","time","handleSetTimes","renderTaskForDay","diferent","differenceInHours","hoursStart","getHours","top","updatedTasks","handleRemoveTask","aria-label","dayName","tasksForDay","task","hours","eachHourOfInterval","addHours","useEffect","result","eachDayOfInterval","updatedDays","useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","NativeSelects","classes","data","handleChange","value","FormControl","InputLabel","htmlFor","NativeSelect","onChange","inputProps","name","Checkbox","ConnectedDetail","selectedPeriod","language","setPeriod","checked","setChecked","remaind","differenceInDays","lastDayOfYear","handleChangeLanguage","handleSetWeek","amount","newWeekStartFrom","addWeeks","today","startOfToday","event","target","e","color","overflowY","updatedCurrentTasks","handleRemoveTasks","App","Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","dynamicCompose","compose","store","createStore","applyMiddleware","render","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b4e3fe1f.chunk.js","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport translationEN from \"./locales/en.json\";\nimport translationUA from \"./locales/ua.json\";\n\nconst setLanguage = () => {\n  const language = localStorage.getItem(\"language\");\n  switch (language) {\n    case \"en\":\n      return \"en\";\n    case \"ua\":\n      return \"ua\";\n    default:\n      return \"en\";\n  }\n};\n\nexport const defaultLanguage: string = setLanguage();\n\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  ua: {\n    translation: translationUA,\n  },\n};\n\ni18n.use(initReactI18next).init({\n  lng: defaultLanguage,\n  fallbackLng: defaultLanguage,\n  resources,\n});\n\nexport default i18n;\n","import { Task, Week } from \"typedefs\";\nimport {\n  CHANGE_LANGUAGE,\n  CHANGE_MONTH,\n  CHANGE_DATE,\n  CHANGE_EVENT_STATUS,\n  FETCH_USER_TASKS,\n  FETCH_TASKS,\n  CHANGE_TYPE,\n  SET_WEEK,\n} from \"actions\";\n\nexport const changeSelectedMonth = (month: number) => ({\n  type: CHANGE_MONTH,\n  payload: {\n    selectedMonth: month,\n  },\n});\n\nexport const changeSelectedDate = (date: string) => ({\n  type: CHANGE_DATE,\n  payload: {\n    selectedDate: date,\n  },\n});\n\nexport const changeLanguage: any = (payload: string) => ({\n  type: CHANGE_LANGUAGE,\n  payload,\n});\n\nexport const changeEventStatus: any = (payload: boolean) => ({\n  type: CHANGE_EVENT_STATUS,\n  payload,\n});\n\nexport const fetchCurrentTasks: any = (payload: Task[]) => ({\n  type: FETCH_USER_TASKS,\n  payload,\n});\n\nexport const fetchAllTasks: any = (payload: Task[]) => ({\n  type: FETCH_TASKS,\n  payload,\n});\n\nexport const changePeriodType: any = (payload: string) => ({\n  type: CHANGE_TYPE,\n  payload,\n});\n\nexport const setWeek: any = (payload: Week) => ({\n  type: SET_WEEK,\n  payload,\n});\n","export const CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\";\nexport const FETCH_TASKS = \"FETCH_TASKS\";\nexport const FETCH_USER_TASKS = \"FETCH_USER_TASKS\";\nexport const CHANGE_EVENT_STATUS = \"CHANGE_EVENT_STATUS\";\nexport const CHANGE_MONTH = \"CHANGE_MONTH\";\nexport const CHANGE_DATE = \"CHANGE_DATE\";\nexport const CHANGE_TYPE = \"CHANGE_TYPE\";\nexport const SET_WEEK = \"SET_WEEK\";\n","import { CHANGE_LANGUAGE } from \"actions\";\n\nconst initialState: string = localStorage.getItem(\"language\") || \"en\";\n\ntype ActionProps = {\n  type: string;\n  payload: string;\n};\n\nfunction changeLanguage(\n  state = initialState,\n  action: ActionProps\n): string | boolean {\n  const { type, payload } = action;\n\n  if (type === CHANGE_LANGUAGE) {\n    return payload;\n  }\n  return state;\n}\n\nexport default changeLanguage;\n","import { CHANGE_MONTH, CHANGE_DATE, CHANGE_TYPE } from \"actions\";\n\ntype ActionProps = {\n  type: string;\n  payload: {\n    selectedMonth: number;\n    selectedDate: Date;\n    type: string;\n  };\n};\n\nconst initialState = {\n  selectedMonth: new Date().getMonth(),\n  selectedDate: new Date(),\n  type: \"month\",\n};\n\nconst selectedDate = (state = initialState, action: ActionProps) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case CHANGE_MONTH:\n      return {\n        ...state,\n        selectedMonth: payload.selectedMonth,\n      };\n    case CHANGE_DATE:\n      const month = new Date(payload.selectedDate).getMonth();\n\n      return {\n        ...state,\n        selectedMonth: month,\n        selectedDate: payload.selectedDate,\n      };\n    case CHANGE_TYPE:\n      return {\n        ...state,\n        type: payload.type,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default selectedDate;\n","import { CHANGE_EVENT_STATUS } from \"actions\";\n\ntype ActionProps = {\n  type: string;\n  payload: boolean;\n};\n\nfunction eventMode(state = false, action: ActionProps): boolean {\n  const { type, payload } = action;\n\n  if (type === CHANGE_EVENT_STATUS) {\n    return payload;\n  }\n  return state;\n}\n\nexport default eventMode;\n","import { Task } from \"typedefs\";\nimport { FETCH_USER_TASKS } from \"actions\";\n\ntype ActionProps = {\n  type: string;\n  payload: Task[];\n};\n\nfunction fetchCurrentTasksReducer(state = [], action: ActionProps): Task[] {\n  const { type, payload } = action;\n  if (type === FETCH_USER_TASKS) {\n    return payload;\n  }\n  return state;\n}\n\nexport default fetchCurrentTasksReducer;\n","export const Languages = [\n  'en',\n  'ua'\n]\n\nexport const periods = ['month', 'week']\n\nexport const MONTHS_CON = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nexport const DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nexport const TIME_ZONE = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\",\n  \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\",\n  \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\",\n  \"21:00\", \"22:00\", \"23:00\"\n];\n\nexport const initialList = [\n  { start: \"2020-10-21T03:00:00.000+03:00\", message: \"Go to supermarket\", id: \"unknown\" },\n  { start: \"2020-10-25T03:00:00.000+03:00\", message: \"Watch a serial\", id: \"unknown\" },\n  { start: \"2020-10-31T03:00:00.000+03:00\", message: \"relaxing day\", id: \"unknown\" }\n]","import { initialList } from \"invariants\";\nimport { Task } from \"typedefs\";\nimport { FETCH_TASKS } from \"actions\";\n\ntype ActionProps = {\n  type: string;\n  payload: Task[];\n};\n\nfunction taskListReducer(state = initialList, action: ActionProps): Task[] {\n  const { type, payload } = action;\n  if (type === FETCH_TASKS) {\n    localStorage.setItem(\"data\", JSON.stringify([...payload] as Task[]));\n    return payload;\n  }\n  return state;\n}\n\nexport default taskListReducer;\n","import { endOfWeek, startOfWeek } from \"date-fns\";\n\nimport { SET_WEEK } from \"actions\";\n\ntype ActionProps = {\n  type: string;\n  payload: {\n    start: Date;\n    end: Date;\n  };\n};\n\nconst initialState = {\n  start: startOfWeek(new Date()),\n  end: endOfWeek(new Date()),\n};\n\nfunction setWeekReducer(state = initialState, action: ActionProps) {\n  const { type, payload } = action;\n  if (type === SET_WEEK) {\n    return payload;\n  }\n  return state;\n}\n\nexport default setWeekReducer;\n","import { combineReducers } from \"redux\";\n\nimport lang from \"./changeLanguage\";\nimport selectedMonth from \"./selectedMonth\";\nimport eventMode from './eventMode'\nimport currentTasks from './currentTasks'\nimport taskList from './taskList'\nimport setWeekReducer from './week'\n\nexport const rootReducer = combineReducers({\n  lang,\n  period: selectedMonth,\n  week: setWeekReducer,\n  eventMode,\n  currentTasks,\n  taskList\n});\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { changeSelectedMonth } from \"actions\";\nimport { State } from \"typedefs\";\nimport { MONTHS_CON } from \"invariants\";\n\nfunction Months() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const selectedMonth = useSelector(\n    (state: State) => state.period.selectedMonth\n  );\n  const changeMonth = (month: number) => {\n    dispatch(changeSelectedMonth(month));\n  };\n\n  const renderItem = (item: string, month: number) => {\n    const cls = clsx(\"month\", {\n      active: month === selectedMonth,\n    });\n\n    return (\n      <article className={cls} key={month} onClick={() => changeMonth(month)}>\n        {t(`month.${item}`)}\n      </article>\n    );\n  };\n\n  return (\n    <section className=\"months\">\n      {MONTHS_CON.map(renderItem)}\n      <span className=\"indicator\" />\n    </section>\n  );\n}\n\nexport default Months;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { withTranslation } from \"react-i18next\";\n\nimport { connect } from \"react-redux\";\nimport {\n  add,\n  getDaysInMonth,\n  getDay,\n  lastDayOfMonth,\n  addMonths,\n  subMonths,\n  differenceInWeeks,\n  format,\n  isSameDay,\n  parseISO,\n  getTime,\n} from \"date-fns\";\n\nimport { changeSelectedDate, fetchCurrentTasks, fetchAllTasks } from \"actions\";\n\nimport { initialList, DAYS } from \"invariants\";\nimport { Task, State } from \"typedefs\";\n\ntype CalendarProps = {\n  changeSelectedDate: any;\n  fetchCurrentTasks: any;\n  fetchAllTasks: any;\n  eventMode: boolean;\n  taskList: Task[];\n  t?: Function;\n};\n\ntype CalendarState = {\n  year: any;\n  month: any;\n  selectedDate: any;\n  dates: any[];\n  selectedDates: any;\n};\n\nclass Calendar extends React.Component<CalendarProps, CalendarState> {\n  static defaultProps = {\n    changeSelectedDate: () => null,\n  };\n  constructor(props: CalendarProps) {\n    super(props);\n    this.state = {\n      year: null,\n      month: null,\n      selectedDate: null,\n      dates: [],\n      selectedDates: {\n        start: null,\n        end: null,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const dataFromStorage: string | null = localStorage.getItem(\"data\");\n    const parsedData = JSON.parse(dataFromStorage as string);\n\n    this.props.fetchAllTasks(parsedData ?? initialList);\n  }\n\n  static makeMonthDates = (props: any) => {\n    const { year, month } = props;\n    const preDates = [];\n    const dates = [];\n    const nextDates = [];\n\n    const preMonth = subMonths(new Date(year, month), 1);\n    const preMonthLastDate = lastDayOfMonth(preMonth);\n    let preMonthDayOffset = getDay(preMonthLastDate);\n\n    while (preMonthDayOffset >= 0 && preMonthDayOffset < 6) {\n      preDates.push({\n        inMonth: false,\n        date: new Date(\n          `${preMonthLastDate.getFullYear()}-${\n            preMonthLastDate.getMonth() + 1\n          }-${preMonthLastDate.getDate() - preMonthDayOffset}`\n        ),\n      });\n      preMonthDayOffset--;\n    }\n\n    const totalDaysInCurrentMonth = getDaysInMonth(new Date(year, month));\n    const currentMonthLastDate = new Date(\n      `${year}-${month + 1}-${totalDaysInCurrentMonth}`\n    );\n\n    for (let day = 1; day < totalDaysInCurrentMonth + 1; day++) {\n      dates.push({\n        inMonth: true,\n        date: new Date(`${year}-${month + 1}-${day}`),\n      });\n    }\n\n    const nextMonth = addMonths(new Date(year, month), 1);\n    const nextMonthFirstDate = new Date(nextMonth.setDate(1));\n    let nextMonthDayOffset = 6 - getDay(currentMonthLastDate);\n    for (let i = 0; i < nextMonthDayOffset; i++) {\n      nextDates.push({\n        inMonth: false,\n        date: new Date(\n          `${nextMonthFirstDate.getFullYear()}-${\n            nextMonthFirstDate.getMonth() + 1\n          }-${nextMonthFirstDate.getDate() + i}`\n        ),\n      });\n    }\n\n    return [...preDates, ...dates, ...nextDates];\n  };\n\n  static getDerivedStateFromProps(nextProps: any, prevState: any) {\n    if (\n      nextProps.year !== prevState.year ||\n      nextProps.month !== prevState.month ||\n      nextProps.selectedDate !== prevState.selectedDate\n    ) {\n      return {\n        year: nextProps.year,\n        month: nextProps.month,\n        selectedDate: nextProps.selectedDate,\n        dates: Calendar.makeMonthDates(nextProps),\n      };\n    }\n    return null;\n  }\n\n  handleSetAction = () => {\n    const { selectedDates } = this.state;\n    let { start, end } = selectedDates;\n\n    if (start && end) {\n      const { taskList, fetchAllTasks } = this.props;\n      const message = prompt(\"task\", \"\");\n      const newTask: Task[] = [];\n      const id = getTime(new Date());\n\n      if (!message) {\n        return;\n      }\n\n      if (start > end) {\n        let temporary = start;\n        start = end;\n        end = temporary;\n        temporary = null;\n      }\n\n      while (start <= end) {\n        newTask.push({\n          start: format(start, `yyyy-MM-dd'T'HH:mm:ss.SSSxxx`),\n          message,\n          id,\n        });\n        start = add(start, { days: 1 });\n      }\n\n      fetchAllTasks([...taskList, ...newTask]);\n    }\n  };\n\n  handleSetDates = (d: Date) => {\n    const { selectedDates } = this.state;\n\n    this.setState(\n      {\n        selectedDates: {\n          start: selectedDates.start ?? d,\n          end: selectedDates.start ? d : selectedDates.end,\n        },\n      },\n      this.handleSetAction\n    );\n\n    if (selectedDates.end) {\n      this.setState({\n        selectedDates: {\n          start: d,\n          end: null,\n        },\n      });\n    }\n  };\n\n  renderDate(dateObj: any, ind: number) {\n    const { t }: any = this.props;\n    const {\n      changeSelectedDate,\n      eventMode,\n      fetchCurrentTasks,\n      taskList,\n    } = this.props;\n    const { selectedDate } = this.state;\n    const { date, inMonth } = dateObj;\n    const cls = clsx(\"calendar-date\", {\n      \"in-month\": inMonth,\n      highlight: inMonth && isSameDay(date, new Date(selectedDate)),\n    });\n\n    const currentTasks = taskList.filter((item: Task) =>\n      isSameDay(date, parseISO(item.start))\n    );\n\n    return (\n      <div\n        className={cls}\n        key={ind}\n        onClick={() => {\n          if (eventMode) {\n            this.handleSetDates(date);\n          } else {\n            fetchCurrentTasks(currentTasks);\n          }\n          changeSelectedDate(date);\n        }}\n      >\n        {format(date, \"dd\")} <br />\n        {currentTasks.length ? `${currentTasks.length} ${t(\"taskHere\")}` : null}\n      </div>\n    );\n  }\n\n  renderDay(day: string) {\n    return (\n      <div className=\"calendar-day\" key={day}>\n        {day}\n      </div>\n    );\n  }\n  renderDays() {\n    const { t }: any = this.props;\n    const updatedDAys = DAYS.map((d) => `${t(`days.${d}`)}`);\n    return (\n      <header className=\"calendar-days\">\n        {updatedDAys.map((day) => this.renderDay(day))}\n      </header>\n    );\n  }\n\n  renderGrid() {\n    return (\n      <section className=\"calendar-grid\">\n        {this.state.dates.map((date, ind) => this.renderDate(date, ind))}\n      </section>\n    );\n  }\n\n  render() {\n    const { dates } = this.state;\n    const weeks = differenceInWeeks(\n      dates[dates.length - 1].date,\n      dates[0].date\n    );\n\n    const cls = clsx(\"calendar\", `calendar-${weeks}-weeks`);\n\n    return (\n      <article className={cls}>\n        {this.renderDays()}\n        {this.renderGrid()}\n      </article>\n    );\n  }\n}\n\nconst ConnectedCalendar = connect(\n  (state: State) => {\n    return {\n      year: new Date().getFullYear(),\n      month: state.period.selectedMonth,\n      selectedDate: state.period.selectedDate,\n      eventMode: state.eventMode,\n      taskList: state.taskList,\n    };\n  },\n  (dispatch) => ({\n    changeSelectedDate: (date: any) => {\n      dispatch(changeSelectedDate(date));\n    },\n    fetchCurrentTasks: (tasks: Task[]) => {\n      dispatch(fetchCurrentTasks(tasks));\n    },\n    fetchAllTasks: (tasks: Task[]) => {\n      dispatch(fetchAllTasks(tasks));\n    },\n  })\n)(Calendar);\n\nconst CalendarTranslated = withTranslation()(ConnectedCalendar);\n\nexport default CalendarTranslated;\n","import React from 'react'\n\nimport { TIME_ZONE } from 'invariants'\n\nfunction Months() {\n  const renderItem = (item: string, index: number) => {\n    return (\n      <div className='time-zone'\n        key={index}\n      >\n        {item}\n      </div>\n    );\n  };\n\n  return (\n    <section className=\"times\">\n      <div style={{ width: '100%', height: '48px' }}></div>\n      {TIME_ZONE.map(renderItem)}\n    </section>\n  );\n}\n\n\n\nexport default Months","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport clsx from \"clsx\";\nimport { withTranslation } from \"react-i18next\";\nimport {\n  getHours,\n  format,\n  isSameDay,\n  parseISO,\n  eachDayOfInterval,\n  eachHourOfInterval,\n  addHours,\n  getTime,\n  differenceInHours,\n} from \"date-fns\";\n\nimport { DAYS } from \"invariants\";\nimport { Task, Week, State } from \"typedefs\";\nimport { changeSelectedDate, fetchCurrentTasks, fetchAllTasks } from \"actions\";\n\ntype CalendarProps = {\n  changeSelectedDate: any;\n  fetchCurrentTasks: any;\n  fetchAllTasks: any;\n  eventMode: boolean;\n  taskList: any[];\n  week: Week;\n  t?: Function;\n};\n\n\nconst WeeklyCalendar: React.FC<CalendarProps> = (props) => {\n  const dispatch = useDispatch();\n  const { eventMode, taskList, week } = useSelector((state: State) => ({\n    eventMode: state.eventMode,\n    taskList: state.taskList,\n    week: state.week,\n  }));\n\n  const [highlitedDate, setHighlitedDate] = useState<Date>(new Date());\n  const [selectedTimes, setSelectedTimes] = useState<any>({\n    start: null,\n    end: null,\n  });\n\n  const handleSetAction = () => {\n    let { start, end } = selectedTimes;\n\n    if (start && end) {\n      const message = prompt(\"task\", \"\");\n      const newTask: Task[] = [];\n      const id = getTime(new Date());\n\n      if (!message) {\n        return;\n      }\n\n      if (start > end) {\n        let temporary = start;\n        start = end;\n        end = temporary;\n        temporary = null;\n      }\n\n      newTask.push({\n        start: format(start, `yyyy-MM-dd'T'HH:mm:ss.SSSxxx`),\n        end: format(end, `yyyy-MM-dd'T'HH:mm:ss.SSSxxx`),\n        message,\n        id,\n      });\n\n      dispatch(fetchAllTasks([...taskList, ...newTask]));\n    }\n  };\n\n  const handleSetTimes = (time: Date) => {\n    setSelectedTimes({\n      start: selectedTimes.start ?? time,\n      end: selectedTimes.start ? time : selectedTimes.end,\n    });\n\n    if (selectedTimes.end) {\n      setSelectedTimes({\n        start: time,\n        end: null,\n      });\n    }\n  };\n\n  const renderHours = (time: Date, index: number) => {\n    return (\n      <div\n        className=\"daily-time\"\n        key={index}\n        onClick={() => {\n          if (eventMode) {\n            handleSetTimes(time);\n          }\n        }}\n      />\n    );\n  };\n\n  const handleRemoveTask = (id: number | string) => {\n    const updatedTasks = taskList.filter((i) => i.id !== id);\n\n    dispatch(fetchAllTasks([...updatedTasks]));\n  };\n\n  const renderTaskForDay = (d: any) => {\n    const diferent = differenceInHours(parseISO(d.end), parseISO(d.start));\n    const hoursStart = getHours(parseISO(d.start));\n\n    return (\n      <div\n        className=\"daily-task\"\n        style={{ height: `${25 * diferent}px`, top: `${25 * hoursStart}px` }}\n      >\n        {d.message}\n        <div\n          className=\"remove-daily-task\"\n          onClick={() => handleRemoveTask(d.id)}\n          aria-label=\"Remove task\"\n        >\n          X\n        </div>\n      </div>\n    );\n  };\n\n  const renderGrid = (date: Date) => {\n    const tasksForDay = taskList.filter(\n      (task: any) =>\n        isSameDay(date, parseISO(task.start)) &&\n        isSameDay(date, parseISO(task.end))\n    );\n\n    const hours = eachHourOfInterval({\n      start: date,\n      end: addHours(date, 23),\n    });\n\n    return (\n      <section className=\"calendar-week-grid\">\n        {hours.map((time: any, index: number) => renderHours(time, index))}\n        {tasksForDay.map((task: Task) => renderTaskForDay(task))}\n      </section>\n    );\n  };\n\n  const renderDay = ({ dayName, date }: any, index: number) => {\n    const cls = clsx(\"calendar-day\", {\n      highlight: isSameDay(date, highlitedDate),\n    });\n\n    const currentTasks = taskList.filter((item: Task) =>\n      isSameDay(date, parseISO(item.start))\n    );\n\n    return (\n      <div className=\"weekly-day-wrapper\">\n        <div\n          className={cls}\n          key={`${index} ${dayName}`}\n          onClick={() => {\n            dispatch(changeSelectedDate(date));\n            dispatch(fetchCurrentTasks(currentTasks));\n            setHighlitedDate(date);\n          }}\n        >\n          {dayName}\n        </div>\n        {renderGrid(date)}\n      </div>\n    );\n  };\n\n  const renderDays = () => {\n    const t: any = props.t;\n    const result = eachDayOfInterval(week as any);\n    const updatedDays = DAYS.map((day, i) => {\n      const date = format(result[i], \"dd/MM\");\n\n      return {\n        dayName: `${t(`days.${day}`)} (${date})`,\n        date: result[i],\n      };\n    });\n\n    return (\n      <header className=\"calendar-days\">\n        {updatedDays.map((day, index) => renderDay(day, index))}\n      </header>\n    );\n  };\n\n  useEffect(handleSetAction, [selectedTimes]);\n\n  return <article className=\"calendar\">{renderDays()}</article>;\n};\n\nconst CalendarTranslated = withTranslation()(WeeklyCalendar as any);\n\nexport default CalendarTranslated;\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect, { NativeSelectProps } from '@material-ui/core/NativeSelect';\nimport { useTranslation } from \"react-i18next\";\n\n\nexport interface NativeSelectsProps extends NativeSelectProps {\n  data: string[]\n  handleChange: any\n  value: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }),\n);\n\nexport default function NativeSelects(props: NativeSelectsProps) {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const { data, handleChange, value } = props;\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"custom-dropdown\">{t(\"period\")}</InputLabel>\n        <NativeSelect\n          value={value}\n          onChange={handleChange}\n          inputProps={{\n            name: 'name',\n            id: 'custom-dropdown',\n          }}\n        >\n          {\n            data.map((i: string) => (\n              <option key={i} value={i}>{t(`select.${i}`)}</option>\n            ))\n          }\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react'\nimport MuiCheckbox, { CheckboxProps as MuiCheckboxProps } from '@material-ui/core/Checkbox'\n\nexport interface CheckboxProps extends MuiCheckboxProps { }\n\nfunction Checkbox(props: CheckboxProps) {\n  return (\n    <MuiCheckbox\n      {...props}\n    />\n  )\n}\n\nexport default Checkbox\n","import React, { useState } from \"react\";\nimport i18n from \"i18next\";\nimport clsx from \"clsx\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  addWeeks,\n  format,\n  differenceInDays,\n  lastDayOfYear,\n  startOfWeek,\n  endOfWeek,\n  startOfToday,\n} from \"date-fns\";\n\nimport {\n  changeLanguage,\n  changeEventStatus,\n  changePeriodType,\n  fetchAllTasks,\n  setWeek,\n  fetchCurrentTasks,\n} from \"actions\";\n\nimport Select from \"components/ui/Select\";\nimport Checkbox from \"components/ui/Checkbox\";\nimport { Languages, periods } from \"invariants\";\nimport { Task, State } from \"typedefs\";\n\ntype DetailProps = {\n  selectedDate: any;\n  tasks: Task[];\n  taskList: Task[];\n  week: any;\n  selectedPeriod: string;\n  language: string;\n};\n\nfunction Detail(props: DetailProps) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const { selectedDate, tasks, selectedPeriod, language } = props;\n\n  const [period, setPeriod] = useState<string>(selectedPeriod);\n  const [checked, setChecked] = useState<boolean>(false)\n\n  const handleChange = (event: React.ChangeEvent<any>) => {\n    setPeriod(event.target.value);\n    dispatch(changePeriodType({ type: event.target.value }));\n  };\n  const remaind = differenceInDays(lastDayOfYear(selectedDate), selectedDate);\n  const year = new Date(selectedDate).getFullYear();\n\n  const handleChangeLanguage = (lang: string) => {\n    localStorage.setItem(\"language\", lang);\n    dispatch(changeLanguage(lang));\n    i18n.changeLanguage(lang);\n  };\n\n  const handleEventStatus = (e: React.ChangeEvent<any>) => {\n    dispatch(changeEventStatus(e.target.checked));\n    setChecked(e.target.checked)\n  };\n\n  const handleRemoveTasks = (id: number | string) => {\n    const { taskList, tasks } = props;\n    const updatedTasks = taskList.filter((i) => i.id !== id);\n    const updatedCurrentTasks = tasks.filter((i) => i.id !== id);\n\n    dispatch(fetchAllTasks([...updatedTasks]));\n    dispatch(fetchCurrentTasks([...updatedCurrentTasks]));\n  };\n\n  const handleSetWeek = (amount: number) => {\n    const { week } = props;\n    const newWeekStartFrom = addWeeks(week.start, amount);\n\n    dispatch(\n      setWeek({ start: newWeekStartFrom, end: endOfWeek(newWeekStartFrom) })\n    );\n  };\n\n  const handleSetWeekFromToday = () => {\n    const today = startOfToday();\n\n    dispatch(setWeek({ start: startOfWeek(today), end: endOfWeek(today) }));\n  };\n\n  return (\n    <section className=\"detail\">\n      <div className=\"language-wrapper\">\n        {Languages.map((i) => {\n          const cls: string = clsx(\"language\", {\n            \"active-language\": language === i,\n          });\n          return (\n            <div\n              className={cls}\n              key={i}\n              onClick={() => handleChangeLanguage(i)}\n            >\n              {i}\n            </div>\n          );\n        })}\n      </div>\n\n      {selectedPeriod === \"week\" && (\n        <div className=\"weekly-btn-wrapper\">\n          <div className=\"week-changer today\" onClick={handleSetWeekFromToday}>\n            {t(\"today\")}\n          </div>\n          <div\n            className=\"week-changer arrows\"\n            onClick={() => handleSetWeek(-1)}\n          >\n            {\"<\"}\n          </div>\n          <div className=\"week-changer arrows\" onClick={() => handleSetWeek(1)}>\n            {\">\"}\n          </div>\n        </div>\n      )}\n\n      <Select data={periods} value={period} handleChange={handleChange} />\n\n      <Checkbox checked={checked} onChange={handleEventStatus} color=\"primary\" />\n      <label>{t(\"eMode\")}</label>\n\n      <article>\n        <h3 className=\"date-string\">{format(selectedDate, \"MMM，Do\")}</h3>\n        <p className=\"remaind\">\n          {remaind} {t(\"daysToNR\")} {year}\n        </p>\n      </article>\n      <br />\n\n      <aside>\n        <h3> {t(\"selectedTaskTitle\")}</h3>\n        <article style={{ overflowY: \"auto\", height: \"200px\" }}>\n          {tasks.map((i: Task, index: number) => (\n            <div key={i.id} className=\"task-detail-block\">\n              <span>\n                {index + 1} {\". \"} {i.message}\n              </span>\n              <span\n                className=\"remove-task\"\n                onClick={() => handleRemoveTasks(i.id)}\n              >\n                X\n              </span>\n            </div>\n          ))}\n        </article>\n      </aside>\n    </section>\n  );\n}\n\nconst ConnectedDetail = connect((state: State) => ({\n  selectedDate: state.period.selectedDate,\n  tasks: state.currentTasks,\n  taskList: state.taskList,\n  selectedPeriod: state.period.type,\n  week: state.week,\n  language: state.lang,\n}))(Detail);\n\nexport default ConnectedDetail;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport ConnectedMonths from \"./pages/Month\";\nimport ConnectedCalendar from \"./pages/Calendar\";\nimport ConnectedTime from \"./pages/Time\";\nimport ConnectedWeeklyCalendar from \"./pages/WeeklyCalendar\";\nimport ConnectedDetail from \"./pages/Details\";\n\nimport { State } from \"./typedefs\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const period: string = useSelector((state: State) => state.period.type);\n\n  return (\n    <section className=\"application\">\n      <main className=\"board\">\n        {period === \"month\" ? (\n          <>\n            <ConnectedMonths />\n            <ConnectedCalendar />\n          </>\n        ) : (\n          <>\n            <ConnectedTime />\n            <ConnectedWeeklyCalendar />\n          </>\n        )}\n        <ConnectedDetail />\n      </main>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport createSagaMiddleware from \"redux-saga\";\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware, Store, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { Provider } from \"react-redux\";\nimport { I18nextProvider } from \"react-i18next\"\n\nimport i18n from \"i18n\"\nimport { rootReducer } from \"reducers\";\nimport App from './App'\nimport { State } from 'typedefs'\nimport * as serviceWorker from './serviceWorker';\n\nimport './App.scss'\nimport './index.css';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst dynamicCompose: any =\n  process.env.NODE_ENV === \"development\" ? composeWithDevTools : compose;\n\nconst store: Store<State> = createStore(\n  rootReducer,\n  dynamicCompose(applyMiddleware(sagaMiddleware))\n);\n\nrender(\n  <I18nextProvider i18n={i18n}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </I18nextProvider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}